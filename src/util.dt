(module util)

(import cstdio)
(import macros)
(import concepts)
(import ctype)
(import stdlib)
(import macros)
(import concepts)
(import cstdlib)
;(import operator-macros)



(using-namespace std.macros

#|
@macro mexit

Stops the compiliation of program.
Useful for debug reasons, when you know some error appears before this macro is expanded, for example, when calling the compiler with --print-expansions to find the macro

|#


(using-namespace std
(def mexit (macro extern (void)
  (exit 1)
  (make-node mc)))
)


#|
@macro fn


|#

(def apply-list
  (fn (attr cto) extern (p DNode)
      ((mc (p MContext))
       (list (p DNode))
       (data (p void))
       (fun (p (fn (p DNode) ((mc (p MContext))
                              (node (p DNode))
                              (data (p void)))))))
    (let ((elt \ (fun mc list data)))
      (if (not (null (@:@ list next-node)))
        (let ((rest \ (@:@ (apply-list mc (@:@ list next-node) data fun) list-node)))
          (qq (uq elt) (uql rest)))
        (qq (uq elt))))))

(def arg-types (fn (attr cto) extern (p DNode) ((mc (p MContext)) (form (p DNode)))
  (apply-list mc form (nullptr void)
    (fn (attr cto) (p DNode) ((mc (p MContext)) (form (p DNode)) (a (p void)))
      (type-of mc form false)))))

(def wrap-list (fn (attr cto) extern (p DNode) ((mc (p MContext)) (form (p DNode)) (name (p DNode)))
  (@:@ 
    (apply-list mc form (cast name (p void))
      (fn (attr cto) (p DNode) ((mc (p MContext)) (form (p DNode)) (a (p void)))
        (let ((name \ (cast a (p DNode))))
          (qq (uq name) (uq form)))))
  list-node)))



(def when (macro extern (con rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 1) rest)))
  (qq if (uq con) (do (uql list)) false)))

(def unless (macro extern (con rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 1) rest)))
  (qq if (uq con) false (do (uql list)))))

(def print (fn intern void ((a bool))
  (printf (if a "true" "false"))))

(def print-val (macro extern (object)
  (qq let ((object \ (uq object)))
    (print object)
    (printf "\n")
    object)))



(def arg-list-names (fn (attr cto) extern (p DNode) ((mc (p MContext)) (form (p DNode)))
  (and (not (= 0 (@:@ form is-list)))
    (and (= 0 (@:' form list-node is-list))
      (and (= 0 (strncmp (@:' form list-node token-str) "void" (cast 4 size)))
        ;; (= (@:' form list-node) (q void))
        (return (nullptr DNode)))))
  (let ((list \
         (apply-list mc (@:@ form list-node) (nullptr void)
           (fn (attr cto) (p DNode) ((mc (p MContext)) (form (p DNode)) (data (p void)))
             (if (= 0 (@:@ form is-list))
               form
               (@:@ form list-node))))))
    (@:@ list list-node))))

(def defc (macro extern (name linkage cname type args)
  (let ((arg-list \ (arg-list-names mc args))
        (fdef \ (if (null arg-list) (qq (uq cname))
                                    (qq (uq cname) (uql-nc arg-list)))))
    (qq do
      (def (uq cname) (fn extern-c (uq type) (uq args)))
      (def (uq name) (fn (uq linkage) (uq type) (uq args)
        (uq fdef)))))))

(def replace-enum-names (fn (attr cto) extern (p DNode) ((mc (p MContext)) (form (p DNode)) (enum-type (p (p DNode))) (typed bool))
  (def data (var auto (array-of 2 (p void)) (array (cast enum-type (p void)) (cast (# typed) (p void)))))
  (apply-list mc (@:@ form list-node) (cast (# data) (p void))
    (fn (attr cto) (p DNode) ((mc (p MContext)) (form (p DNode)) (data (p void)))
      (def arr (var auto \ (cast data (p (array-of 2 (p void))))))
      (def enum-type (var auto \ (cast (@$ (@ arr) 0) (p (p DNode)))))
      (def typed (var auto \ (cast (@$ (@ arr) 1) (p bool))))
      (if (or (= 0 (@:@ form is-list))
            (or (null (@:@ form list-node))
              (or (null (@:' form list-node next-node))
                (or (= 0 (@:' form list-node next-node is-list))
                  (or (null (@:' form list-node next-node list-node))
                    ;;(not (= (@:' form list-node next-node list-node) (q enum)))
                    (not (= 0 (strncmp (@:' form list-node next-node list-node token-str) "enum" (cast 4 size))))
                    )))))
        form
        (do
          (unless (null enum-type)
            (setf enum-type (@:' form list-node next-node list-node next-node)))
          (let ((list-node \ (@:@ form list-node)))
            (if (@ typed)
              (qq (uq list-node) enum)
              list-node))))))))


(def def-enum-fn-ext (macro extern (name linkage fname flinkage ret param rest)
  (def enum-type (var auto (p DNode) (q 1)))
  (def names (var auto \ (arg-list-names mc param)))
  (def nparam (var auto \ (replace-enum-names mc param (# enum-type) true)))
  (def mparam (var auto \ (replace-enum-names mc param (nullptr (p DNode)) false)))
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 6) rest)))
  (def fdef (var auto \
    (if (null list)
      (qq def (uq fname) (fn (uq flinkage) (uq ret) (uq nparam)))
      (qq def (uq fname) (fn (uq flinkage) (uq ret) (uq nparam)
        (uql list))))))
  (qq do
    (namespace (uq name)
      (def-enum enum (uq linkage) (uql enum-type))
      (uq fdef))
    (def (uq name) (macro (uq linkage) (uq mparam)
      (qq (uq fname) (uql names)))))))

(def def-enum-fn (macro extern (name linkage ret param rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 4) rest)))
  (qq def-enum-fn-ext (uq name) (uq linkage) fn (uq linkage) (uq ret) (uq param) (uql list))))

(def defc-enum (macro extern (name linkage cname ret param)
  (qq def-enum-fn-ext (uq name) (uq linkage) (uq cname) extern-c (uq ret) (uq param))))

(def defc-multi (macro extern (name linkage def0 rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 3) rest)))
  (ignore assert (not (= 0 (@:@ def0 is-list))))
  (def defc (var auto \ (qq defc (uq name) (uq linkage) (uql (@:@ def0 list-node)))))
  (if (null list)
    defc
    (qq do
      (uq defc)
      (defc-multi (uq name) (uq linkage) (uql list))))))

(import operator-macros)


(def pow (macro extern (x (n int))
    (def n0 (var auto int))
    (if (eval-expression mc (q int) n (cast (# n0) (p void)))
        (do (if (= n0 1) x
                (let ((n1 \ (- n0 1))
                      (nn \ (mnfv mc n1)))
                  (if (is-lvalue mc x)
                    (qq * (uq x) (pow (uq x) (uq nn)))
                    (let ((tmp \ (make-gensym-var-node mc)))
                      (qq let (((uq tmp) \ (uq x)))
                        (* (uq tmp) (pow (uq tmp) (uq nn)))))))))
        (do (report-error mc n "unable to evaluate\n") (qq no-op)))))

(def is-zero (fn extern bool ((a float))
  (= a 0.0)))

(def is-zero (fn extern bool ((a double))
  (= a (cast 0.0 double))))

(def is-zero (fn extern bool ((a long-double))
  (= a (cast 0.0 long-double))))


(def /0 (macro extern (x y)
  (qq if (is-zero (uq y))
    (* (uq x) (uq y))
    (/ (uq x) (uq y)))))


(def in (macro extern (name value rest)
  (let ((list \ (get-varargs-list mc (- (arg-count mc) 2) rest))
        (en \ (make-gensym-var-node mc))
        (bn \ (make-gensym-var-node mc)))
    (if (is-lvalue mc value)
      (qq for (((uq bn) \ (begin (uq value))) ((uq en) \ (end (uq value))))
              (< (uq bn) (uq en))
              (setv (uq bn) (successor (uq bn)))
        (let (((uq name) \ (source (uq bn))))
          (uql list)))
      (let ((val \ (make-gensym-var-node mc)))
        (qq let (((uq val) \ (uq value)))
      (in (uq name) (uq val) (uql list))))))))

(def tts (fn (attr cto) intern bool ((mc (p MContext)) (T (p DNode)) (buf (p char)))
  (if (and (= 0 (@:@ T is-list))
         (std.isdigit (@ (@:@ T token-str))))
    (do (sprintf buf "%s" (@:@ T token-str))
        true)
    (type-to-string mc T buf))))

(def make-type-stringf
  (fn (attr cto) extern bool ((mc (p MContext))
                   (prefix (p (const char)))
                   (T1 (p DNode))
                   (T2 (p DNode))
                   (T3 (p DNode))
                   (buf (p char)))
    (let ((tstr1 (array-of 250 char))
          (tstr2 (array-of 250 char))
          (tstr3 (array-of 250 char)))
      (setf ($ tstr1 0) #\NULL)
      (setf ($ tstr2 0) #\NULL)
      (setf ($ tstr3 0) #\NULL)
      (and (not (tts mc T1 tstr1))
           (return false))
      (and (not (tts mc T2 tstr2))
           (return false))
      (and (not (tts mc T3 tstr3))
           (return false))
      (sprintf buf "%s%s%s%s" prefix tstr1 tstr2 tstr3)
true)))

(def def-type-macro2
  (macro extern (name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                n))))))))

(def def-type-macro3
  (macro extern (name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq name)
            (macro extern (T U V)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-stringf mc (uq string) T U V typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                n))))))))

(ignore def def-type-macro2
  (macro extern (macro-name name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq macro-name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                n))))))))

(ignore def as-macro (macro extern (rest)
  (let ((macro-name \ (make-gensym-var-node mc)))
    (qq do
      (def (uq macro-name) (macro extern (void)
        (uql (get-varargs-list mc (arg-count mc) rest))))
      ((uq macro-name))))))

(ignore def make-type-node
  (fn extern (p DNode) ((mc (p MContext)) (name (p DNode)) (T (p DNode)) (U (p DNode)))
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (as-macro
            (let ((typename (array-of 250 char)))
              (and (not (make-type-string mc (uq string) (q (uq T)) (q (uq U)) typename))
                   (return T))
              (def n (var auto (p DNode) (mnfv mc typename)))
              n)))))))


(ignore using-namespace std.concepts
(def def-type-macro2+
  (macro extern (name)
    (let ((buf (array-of 250 char)))
      (sprintf buf "\"%s\"" (@:@ name token-str))
      (let ((string \ (std.macros.mnfv mc buf)))
        (qq do
          (def (uq name)
            (macro extern (T U)
              (let ((typename (array-of 250 char)))
                (and (not (make-type-string mc (uq string) T U typename))
                     (return T))
                (def n (var auto (p DNode) (mnfv mc typename)))
                (if (exists-type mc typename)
                    n
                    (qq do
                      (instantiate (uq (uq name)) (uq (uq T)) (uq (uq U)))
                      (uq n)))))))))))
)

(def def-ptr-macro (macro extern (name linkage type)
  (qq using-namespace std.macros
    (def (uq name) (macro (uq linkage) ((value (p (uq type))))
      (qq (uq name) (@ (uq (uq value)))))))))

(def def-ptr-macro2 (macro extern (name linkage type)
  (qq using-namespace std.macros
    (def (uq name) (macro (uq linkage) ((value1 (p (uq type))) (value2 (p (uq type))))
      (qq (uq name) (@ (uq (uq value1))) (@ (uq (uq value2)))))))))

(def macro-print (macro extern (object)
  (print object)
  (printf "\n")
  (qq no-op)))

  (def make-list (macro extern (a)
    (qq (uq a))))

  (def make-list (macro extern (a rest)
    (let ((list \ (get-varargs-list mc (- (arg-count mc) 1) rest)))
      (qq (uq a) (make-list (uql list))))))

  (ignore def range-fn (fn (attr cto) extern (p DNode) ((mc (p MContext)) (a (p DNode)) (b (p DNode)))
    (let ((x int)
          (y int))
      (eval-expression mc (q int) a (cast (# x) (p void)))
      (eval-expression mc (q int) b (cast (# y) (p void)))
        (if (< x y)
          (qq (uq a) (uql (@:@ (range-fn mc (mnfv mc (+ x 1)) b) list-node)))
          (qq (uq a))))))

  (ignore def range (macro extern (a b)
    (range-fn mc a b)))


(def incf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (+ (@ (uq pos)) (uq res)))))))

(def decf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (- (@ (uq pos)) (uq res)))))))

(def mulf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (* (@ (uq pos)) (uq res)))))))

(def divf (macro extern (val res)
  (let ((pos \ (make-gensym-var-node mc)))
    (qq let (((uq pos) \ (uq val)))
      (setf (uq pos) (/ (@ (uq pos)) (uq res)))))))

(def over (fn extern (retval int) ((n int) (k int))
  (setf retval 1)
  (for (i int 1) (< i k) (incv i)
    (mulf retval (/ (- (+ n 1) i) i)))))


(def-left-associative-macro @$' extern @$)

(ignore def my-make-list (fn (attr cto) intern (p DNode) ((mc MContext) (list (p DNode)))
  (let ((list-node (p DNode) list))
    (and (!= (@:@ list is-list) 0)
       (setv list-node (@:@ list list-node)))
    (qq (uq list-node) (uql (@:@ (my-make-list (@:@ list next-node)) list-node))))))

(def with-slots-tmp (var intern (p DNode)))

(ignore def with-slots (macro extern (list value rest)
  (setv with-slots-tmp (make-gensym-var-node mc))
  (if (is-lvalue mc value)
    (do (report-error mc value "`with-slots` currently only works with rvalues") (qq no-op))
    (qq let (((uq with-slots-tmp) \ (uq value)))
      (let (uq (apply-list mc list (nullptr void)
        (fn (attr cto) (p DNode) ((mc (p MContext)) (node (p DNode)) (data (p void)))
          (qq (uq node) \ (@: (uq with-slots-tmp) val))))))))))

(ignore def test (fn intern void (void)
  (with-slots (a b c) n
    (* a b))))

(ignore using-namespace std.concepts
(def + (macro extern (a b)
  (let ((A \ (type-of mc a false))
        (B \ (type-of mc b false)))
      (ignore when (= A B)
        (report-error mc "For + both types should be the same")
        (return (qq no-op)))
      (qq using-namespace std.concepts
        (when (exists-concept +)
          (instantiate + (uq A)))
        (if (exists-fn (uq A) + (uq A) (uq A))
          (as-macro (qq + (uq a) (uq b)))
          (as-macro (qq no-op)))))))
)
)



